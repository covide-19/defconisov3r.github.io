<!DOCTYPE html>
<html>
  <head>
    <link rel="icon" href="data:;base64,iVBORw0KGgo=">
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>CoronaVirus India - Live Interactive Map</title>
    <meta name="description" content="Live updated map of novel corona virus, covid-19, city wise spread in india."/>
    <script type="text/javascript" src="data.js"></script>
    <!-- Google Analytics -->
    <script>
    window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
    ga('create', 'UA-160825964-1', 'auto');
    ga('send', 'pageview');
    </script>
    <script async src='https://www.google-analytics.com/analytics.js'></script>
    <!-- End Google Analytics -->
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
        height: 100%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #wrapper { height: 100%; }
      #over_map {
        position: absolute;
        top: 0.6em;
        right: 0.6em;
        z-index: 99;
      }
      #info_box {
        background-color: rgba(255,255,255,1);
        padding: 10px;
        font-size: smaller;
        color: rgba(0, 0, 0, 0.87);
        border-radius: 10px;
      }
      #info {
        font-size: small;
        margin-top: 10px;
      }
      #share {
        position: absolute;
        right: 0.6em;
        bottom: 7em;
        display: none;
      }
      #over_map #last_updated {
        color: rgba(0, 0, 0, 0.57);
        font-size: smaller;
      }
      #list {
        position: absolute;
        top: 8em;
      }
      #list #button {
        background-color: teal;
        color: white;
        padding: 5px 10px;
        border-radius: 0px 5px 5px 0px;
        cursor: pointer;
        display: inline-block;
        position: inherit;
        top: 20px;
      }

      #state_list {
        border-collapse: collapse;
        background-color: white;
        font-size: small;
        width: 100%;
        display: none;
        height: 480px;
        overflow-y: scroll;
      }
      #state_list td, #state_list th {
        border: 1px solid #ddd;
        padding: 8px;
      }
      #state_list tr:nth-child(even){background-color: #f2f2f2;}
      #state_list tr:hover {background-color: #ddd;}
      #state_list th {
        padding-top: 12px;
        padding-bottom: 12px;
        text-align: left;
      }
    </style>
  </head>
  <body>
    <div id="wrapper">
      <div id="map"></div>
      <div id="over_map">
          <div id="info_box">
            <b>CoronaVirus Map - India</b>
            <div id="info">
              <span id="confirmed"></span> confirmed cases</br>
              <span id="recovered"></span> recovered</br>
              <span id="death"></span> reported deaths</br>
              0 cases found today
              <div id="last_updated">
                --------------------------------------------<br/>
                last updated: 1:00am 20 March
              </div>
            </div>
          </div>
      </div>
      <div id="list">
        <table id="state_list">
          <thead>
            <tr>
              <th>State</th>
              <th>Reported</th>
              <th>Recovered</th>
              <th>Deaths</th>
            </tr>
          </thead>
          <tbody>
          </tbody>
        </table>
        <div id="button">
          LIST
        </div>
      </div>
      <img id="share" src="./share.png" />
    </div>

    <script>
      var wrapper = document.getElementById('wrapper');
      var share = document.getElementById('share');
      var list_button =  document.getElementById('button');
      var state_list = document.getElementById('state_list');
      let isMobile = window.matchMedia("only screen and (max-width: 760px)").matches;

      if (navigator.share && isMobile) {
        share.style.display = "block"
      };
      share.addEventListener("click", async () => {
        try {
          await navigator.share({ title: "Example Page", url: "" });
          console.log("Data was shared successfully");
        } catch (err) {
          console.error("Share failed:", err.message);
        }
      });
      list_button.addEventListener("click", async (ev) => {
        if(list_button.textContent != "X") {
          list_button.textContent = "X";
          state_list.style.display = "inline-block";
          ev.stopPropagation();
        }
      });
      state_list.addEventListener("click", async (ev) => {
        ev.stopPropagation();
      });
      wrapper.addEventListener("click", async () => {
        if(list_button.textContent === "X") {
          list_button.textContent = "LIST";
          state_list.style.display = "none";
        }
      });
      function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
          zoom: 6,
          center: {lat: 23.024, lng: 77.887},
          streetViewControl: false,
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          mapTypeControl: false
        });

        // Create an array of alphabetical characters used to label the markers.
        var labels = '111111111111111111';
        var confirmed = 0;
        var death = 0;
        var recovered = 0;
        var states = {};
        // Add some markers to the map.
        // Note: The code uses the JavaScript Array.prototype.map() method to
        // create an array of markers based on a given "locations" array.
        // The map() method here has nothing to do with the Google Maps API.
        var markers = [];
        locations.forEach(function(location, i) {
          count = location[5];
          if(states[location[1]] === undefined) {
            states[location[1]] = [location[5], location[6], location[7]];
          } else {
            states[location[1]][0] += location[5];
            states[location[1]][1] += location[6];
            states[location[1]][2] += location[7];
          }
          if(location[0] === "in") {
            confirmed += location[5];
            recovered += location[6];
            death += location[7];
          }
          while(count > 0) {
            count--;
            var mark = new google.maps.Marker({
              position: {lat: location[3], lng: location[4]},
              label: labels[(i+count) % labels.length],
              title: location[2]
            });
            markers.push(mark);
          }
        });
        var state_keys = Object.keys(states)
        state_keys.sort(function(a, b) {
            return states[b][0] - states[a][0];
        });
        console.log(states);
        state_keys.forEach(function(key, i) {
          state_list.tBodies[0].innerHTML += 
          '<tr id = "row' + i + '"><td>'+key+'</td><td>'+states[key][0]+'</td><td>'+states[key][1]+'</td><td>'+states[key][2]+'</td></tr>';
        });

        // set confirmed cases count
        document.getElementById("confirmed").textContent= confirmed;
        document.getElementById("death").textContent= death;
        document.getElementById("recovered").textContent= recovered;
        // Add a marker clusterer to manage the markers.
        var markerCluster = new MarkerClusterer(map, markers,
            {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});
      }
    </script>
    <script src="https://unpkg.com/@google/markerclustererplus@4.0.1/dist/markerclustererplus.min.js"></script>
    <!-- production  -->
    <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAKUweQ7xFa4aT9YghZLJmIePQ1cXzkS30&callback=initMap">
    </script>
    <!-- development -->
    <!-- <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA-7So1kMNMMKQhTZV6GiqOyhmaFSXx4c0&callback=initMap">
    </script> -->
  </body>
</html>
